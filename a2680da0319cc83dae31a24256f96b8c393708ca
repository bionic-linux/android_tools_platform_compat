{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1639a67e_3cc0953c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-04-16T16:44:21Z",
      "side": 1,
      "message": "PTAL",
      "revId": "a2680da0319cc83dae31a24256f96b8c393708ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39966cbb_22d64925",
        "filename": "hiddenapi/prevent_additions.sh",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2021-04-15T13:52:45Z",
      "side": 1,
      "message": "can we explicitly state the packages? (could be passed as an arg to the script?)",
      "range": {
        "startLine": 12,
        "startChar": 30,
        "endLine": 12,
        "endChar": 38
      },
      "revId": "a2680da0319cc83dae31a24256f96b8c393708ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bfc8462_7a24ee78",
        "filename": "hiddenapi/prevent_additions.sh",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-04-16T16:44:21Z",
      "side": 1,
      "message": "It is a little misleading (copy and paste from the existing frameworks/base/tools/hiddenapi/exclude.sh script) as it is all the packages contained within the hiddenapi/hiddenapi-*.txt files. Restricting it to a set of packages would be meaningless.\n\nThe entries that are affected are output below this message so it should be very clear which ones are new.\n\nUpdated the message.",
      "parentUuid": "39966cbb_22d64925",
      "range": {
        "startLine": 12,
        "startChar": 30,
        "endLine": 12,
        "endChar": 38
      },
      "revId": "a2680da0319cc83dae31a24256f96b8c393708ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "199fa961_2fd6fcd9",
        "filename": "hiddenapi/prevent_additions.sh",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2021-04-19T09:32:41Z",
      "side": 1,
      "message": "Oh, so you\u0027re requiring that no additions are made to those files?\n\nWhat about renames? This will prevent those too, as they show as an add and remove in the git diff view. That doesn\u0027t seem right and will require people of bypass the upload hook. (renames are ok as per go/nonsdk/ref/policy)\n\nSince we have go/nonsdk/ref/presubmit I think it would be much better to enforce that there. We have login in there to distinguish adds from renames already.",
      "parentUuid": "4bfc8462_7a24ee78",
      "range": {
        "startLine": 12,
        "startChar": 30,
        "endLine": 12,
        "endChar": 38
      },
      "revId": "a2680da0319cc83dae31a24256f96b8c393708ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fd4ef66_647f45f6",
        "filename": "hiddenapi/prevent_additions.sh",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-04-19T09:44:48Z",
      "side": 1,
      "message": "The intent of this is to encourage people to switch to using UnsupportedAppUsage annotations. If someone is renaming a method then they can easily just add an annotation and remove the entry from the file altogether.\n\nIt is basically replicating the mechanism that already exists in frameworks/base/tools/hiddenapi/exclude.sh to prevent additional entries. This is simpler as it does not need to treat the entries differently depending on what package they\u0027re in.\n\nIt is not clear to me what the presubmit check does. If seems likely based on https://r.android.com/1228421 that it generates the hidden API flags and then compares that against some base set to see the difference. If so then it probably does not care whether the flags come from annotations or flag files and so it is not doing the same job as this script will.",
      "parentUuid": "199fa961_2fd6fcd9",
      "range": {
        "startLine": 12,
        "startChar": 30,
        "endLine": 12,
        "endChar": 38
      },
      "revId": "a2680da0319cc83dae31a24256f96b8c393708ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "760018ae_a9a1c50d",
        "filename": "hiddenapi/prevent_additions.sh",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1010681
      },
      "writtenOn": "2021-04-19T10:22:59Z",
      "side": 1,
      "message": "Adding new unsupported APIS is already banned by go/nonsdk/ref/presubmit, regardless of whether it\u0027s via annotation or adding to these files. See the table under \"Strategy\" there.\n\nSo I\u0027d argue that this is unnecessary. It doesn\u0027t do anything that isn\u0027t enforced elsewhere, and will just create extra overhead if listed APIs get renamed.",
      "parentUuid": "0fd4ef66_647f45f6",
      "range": {
        "startLine": 12,
        "startChar": 30,
        "endLine": 12,
        "endChar": 38
      },
      "revId": "a2680da0319cc83dae31a24256f96b8c393708ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c75064d0_b61cf977",
        "filename": "hiddenapi/prevent_additions.sh",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1039338
      },
      "writtenOn": "2021-04-19T11:09:47Z",
      "side": 1,
      "message": "If the presubmit check didn\u0027t allow renames then I would agree. There would still be a benefit to detecting it early at upload time instead of during presubmit but it would be much smaller.\n\nHowever, allowing renames seems like a big hole. A rename breaks apps just as much as removing the method completely would. Yes, the app can be fixed more easily by just looking for the new method (with some fallback mechanism to the old) but that is still work for the app developer and at the end they are no better off than they were at the beginning, in fact they are worse off because now their code is a little more complicated.\n\nI think that if the owner wants to rename the method then they should be required to leave a stub behind (with the UnsupportedAppUsage annotation) that delegates to the new method. It costs them very little and avoids any app compatibility issues altogether - which is the whole point of this mechanism in the first place.\n\nDetecting renames reliably is very difficult, you would have to look at the implementation in order to know whether the new method was actually just the old method with a different name or a completely new method that was added at the same time, and with the same signature as . It opens up the possibility of the presubmit assuming that a change was a rename when in fact it was not which would allow new non-public methods to be added to the hidden API and old used-by-app methods to be completely removed.\n\nThe libcore, icu and conscrypt team have already relied on the frameworks/base/tools/hiddenapi/exclude.sh script to protect them from new entries being added (including renames) without complaint. This script simply replicates that.\n\nAt the end of the day I think it should be up to the code owners to decide whether they want to enforce stricter rules than that enforced by the presubmit check. This script will make it easy for them to opt-in and avoids having to duplicate it in each of their repositories.",
      "parentUuid": "760018ae_a9a1c50d",
      "range": {
        "startLine": 12,
        "startChar": 30,
        "endLine": 12,
        "endChar": 38
      },
      "revId": "a2680da0319cc83dae31a24256f96b8c393708ca",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}